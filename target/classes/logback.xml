<?xml version="1.0" encoding="UTF-8"?>

        <!--
        scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
        　　　　scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
        　　　　debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
        -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">

<!--使用logback的一个特性，它提供<property resource=''>来读取我们的配置文件，
我们只需要在resource里面配置好我们对应logback.properties的文件路径就可以了-->

<property name="LOG_LEVEL" value="INFO" />
<property name="BASE_NAME" value="/logs" />
<property name="LOG_NAME" value="xxlJob-executor" />
<property name="filePattern"   value="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level%thread %logger{36}.%M.%L %msg%n" />

<!--为了防止进程退出时，内存中的数据丢失，请加上此选项-->
<shutdownHook class="ch.qos.logback.core.hook.DelayingShutdownHook"/>


<appender name="FILE_ERROR_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${BASE_NAME}/${LOG_NAME}/${LOG_NAME}.error.log</file>

    <filter class="ch.qos.logback.classic.filter.LevelFilter">
        <level>ERROR</level>
        <onMatch>ACCEPT</onMatch>
        <onMismatch>DENY</onMismatch>
    </filter>

    <encoder charset="UTF-8">
        <pattern>${filePattern}</pattern>
    </encoder>

    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
        <!-- daily rollover -->
        <fileNamePattern>${BASE_NAME}/${LOG_NAME}/${LOG_NAME}.error.%d{yyyy-MM-dd}.log</fileNamePattern>
        <!-- keep 30 days' worth of history -->
        <maxHistory>30</maxHistory>
    </rollingPolicy>
</appender>

<appender name="FILE_WARN_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${BASE_NAME}/${LOG_NAME}/${LOG_NAME}.warn.log</file>

    <filter class="ch.qos.logback.classic.filter.LevelFilter">
        <level>WARN</level>
        <onMatch>ACCEPT</onMatch>
        <onMismatch>DENY</onMismatch>
    </filter>

    <encoder charset="UTF-8">
        <pattern>${filePattern}</pattern>
    </encoder>

    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
        <!-- daily rollover -->
        <fileNamePattern>${BASE_NAME}/${LOG_NAME}/${LOG_NAME}.warn.%d{yyyy-MM-dd}.log</fileNamePattern>
        <!-- keep 30 days' worth of history -->
        <maxHistory>30</maxHistory>
    </rollingPolicy>
</appender>

<appender name="FILE_INFO_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${BASE_NAME}/${LOG_NAME}/${LOG_NAME}.info.log</file>

    <!-- 打印INFO级别和以上的日志 -->
    <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
        <level>INFO</level>
    </filter>


    <encoder charset="UTF-8">
        <pattern>${filePattern}</pattern>
    </encoder>

    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
        <!-- daily rollover -->
        <fileNamePattern>${BASE_NAME}/${LOG_NAME}/${LOG_NAME}.info.%d{yyyy-MM-dd}.log</fileNamePattern>
        <!-- keep 30 days' worth of history -->
        <maxHistory>30</maxHistory>
    </rollingPolicy>
</appender>

<appender name="FILE_DEBUG_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${BASE_NAME}/${LOG_NAME}/${LOG_NAME}.debug.log</file>

    <filter class="ch.qos.logback.classic.filter.LevelFilter">
        <level>DEBUG</level>
        <onMatch>ACCEPT</onMatch>
        <onMismatch>DENY</onMismatch>
    </filter>

    <encoder charset="UTF-8">
        <pattern>${filePattern}</pattern>
    </encoder>

    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
        <!-- daily rollover -->
        <fileNamePattern>${BASE_NAME}/${LOG_NAME}/${LOG_NAME}.debug.%d{yyyy-MM-dd}.log</fileNamePattern>
        <!-- keep 30 days' worth of history -->
        <maxHistory>30</maxHistory>
    </rollingPolicy>
</appender>

<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    <!-- encoders are assigned the type ch.qos.logback.classic.encoder.PatternLayoutEncoder
        by default -->
    <encoder>
        <pattern>${filePattern}</pattern>
    </encoder>
</appender>

<!-- 可用来获取StatusManager中的状态 -->
<statusListener class="ch.qos.logback.core.status.OnConsoleStatusListener"/>

<root>
    <level value="${LOG_LEVEL}"/>
    <appender-ref ref="STDOUT"/>

    <appender-ref ref="FILE_ERROR_LOG"/>
    <appender-ref ref="FILE_WARN_LOG"/>
    <appender-ref ref="FILE_INFO_LOG"/>
    <appender-ref ref="FILE_DEBUG_LOG"/>
</root>
</configuration>
